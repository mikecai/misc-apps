
# Configuration checksum: 13192290582198124700

# setup custom paths that do not require root access
pid /tmp/nginx.pid;

load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;

daemon off;

worker_processes 8;

worker_rlimit_nofile 130048;

worker_shutdown_timeout 10s ;

events {
	multi_accept        on;
	worker_connections  16384;
	use                 epoll;
}

http {
	lua_package_cpath "/usr/local/lib/lua/?.so;/usr/lib/lua-platform-path/lua/5.1/?.so;;";
	lua_package_path "/etc/nginx/lua/?.lua;/etc/nginx/lua/vendor/?.lua;/usr/local/lib/lua/?.lua;;";
	
	lua_shared_dict configuration_data 5M;
	lua_shared_dict certificate_data 16M;
	
	init_by_lua_block {
		require("resty.core")
		collectgarbage("collect")
		
		local lua_resty_waf = require("resty.waf")
		lua_resty_waf.init()
		
		-- init modules
		local ok, res
		
		ok, res = pcall(require, "lua_ingress")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		lua_ingress = res
		end
		
		ok, res = pcall(require, "configuration")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		configuration = res
	configuration.nameservers = { "10.0.0.10" }
		end
		
		ok, res = pcall(require, "balancer")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		balancer = res
		end
		
		ok, res = pcall(require, "monitor")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		monitor = res
		end
		
	}
	
	init_worker_by_lua_block {
		lua_ingress.init_worker()
		balancer.init_worker()
		
		monitor.init_worker()
		
	}
	
	geoip_country       /etc/nginx/geoip/GeoIP.dat;
	geoip_city          /etc/nginx/geoip/GeoLiteCity.dat;
	geoip_org           /etc/nginx/geoip/GeoIPASNum.dat;
	geoip_proxy_recursive on;
	
	aio                 threads;
	aio_write           on;
	
	tcp_nopush          on;
	tcp_nodelay         on;
	
	log_subrequest      on;
	
	reset_timedout_connection on;
	
	keepalive_timeout  75s;
	keepalive_requests 10000;
	
	client_body_temp_path           /tmp/client-body;
	fastcgi_temp_path               /tmp/fastcgi-temp;
	proxy_temp_path                 /tmp/proxy-temp;
	ajp_temp_path                   /tmp/ajp-temp;
	
	client_header_buffer_size       1k;
	client_header_timeout           60s;
	large_client_header_buffers     4 8k;
	client_body_buffer_size         8k;
	client_body_timeout             60s;
	
	http2_max_field_size            4k;
	http2_max_header_size           16k;
	http2_max_requests              1000;
	
	types_hash_max_size             2048;
	server_names_hash_max_size      1024;
	server_names_hash_bucket_size   64;
	map_hash_bucket_size            64;
	
	proxy_headers_hash_max_size     512;
	proxy_headers_hash_bucket_size  64;
	
	variables_hash_bucket_size      128;
	variables_hash_max_size         2048;
	
	underscores_in_headers          off;
	ignore_invalid_headers          on;
	
	limit_req_status                503;
	limit_conn_status               503;
	
	include /etc/nginx/mime.types;
	default_type text/html;
	
	gzip on;
	gzip_comp_level 5;
	gzip_http_version 1.1;
	gzip_min_length 256;
	gzip_types application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/x-component;
	gzip_proxied any;
	gzip_vary on;
	
	# Custom headers for response
	
	server_tokens off;
	
	more_clear_headers Server;
	
	# disable warnings
	uninitialized_variable_warn off;
	
	# Additional available variables:
	# $namespace
	# $ingress_name
	# $service_name
	# $service_port
	log_format upstreaminfo '$the_real_ip - [$the_real_ip] - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id';
	
	map $request_uri $loggable {
		
		default 1;
	}
	
	access_log off;
	
	error_log  /var/log/nginx/error.log notice;
	
	resolver 10.0.0.10 valid=30s;
	
	# See https://www.nginx.com/blog/websocket-nginx
	map $http_upgrade $connection_upgrade {
		default          upgrade;
		
		# See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
		''               '';
		
	}
	
	# The following is a sneaky way to do "set $the_real_ip $remote_addr"
	# Needed because using set is not allowed outside server blocks.
	map '' $the_real_ip {
		
		default          $remote_addr;
		
	}
	
	map '' $pass_access_scheme {
		default          $scheme;
	}
	
	map '' $pass_server_port {
		default          $server_port;
	}
	
	# Obtain best http host
	map $http_host $best_http_host {
		default          $http_host;
		''               $host;
	}
	
	# validate $pass_access_scheme and $scheme are http to force a redirect
	map "$scheme:$pass_access_scheme" $redirect_to_https {
		default          0;
		"http:http"      1;
		"https:http"     1;
	}
	
	# map port 442 to 443 for header X-Forwarded-Port
	map $pass_server_port $pass_port {
		442              443;
		default          $pass_server_port;
	}
	
	# Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.
	# If no such header is provided, it can provide a random value.
	map $http_x_request_id $req_id {
		default   $http_x_request_id;
		
		""        $request_id;
		
	}
	
	# Create a variable that contains the literal $ character.
	# This works because the geo module will not resolve variables.
	geo $literal_dollar {
		default "$";
	}
	
	server_name_in_redirect off;
	port_in_redirect        off;
	
	ssl_protocols TLSv1.2;
	
	# turn on session caching to drastically improve performance
	
	ssl_session_cache builtin:1000 shared:SSL:10m;
	ssl_session_timeout 10m;
	
	# allow configuring ssl session tickets
	ssl_session_tickets on;
	
	# slightly reduce the time-to-first-byte
	ssl_buffer_size 4k;
	
	# allow configuring custom ssl ciphers
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
	ssl_prefer_server_ciphers on;
	
	ssl_ecdh_curve auto;
	
	proxy_ssl_session_reuse on;
	
	upstream upstream_balancer {
		server 0.0.0.1; # placeholder
		
		balancer_by_lua_block {
			balancer.balance()
		}
		
		keepalive 64;
		
		keepalive_timeout  60s;
		keepalive_requests 100;
		
	}
	
	# Global filters
	
	## start server 9.42.75.140.nip.io
	server {
		server_name 9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 131ebe97922b3761399f87b3cca27ece09147151
		ssl_certificate                         /etc/ingress-controller/ssl/default-fake-certificate.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/default-fake-certificate.pem;
		
		location ~* "^/integration(/|$)(.*)" {
			
			set $namespace      "integration";
			set $ingress_name   "icp4i-ibm-icp4i-prod";
			set $service_name   "icp4i-ibm-icp4i-prod";
			set $service_port   "5055";
		set $location_path  "/integration(/|${literal_dollar})(.*)";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "integration-icp4i-ibm-icp4i-prod-5055";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			rewrite "(?i)/integration(/|$)(.*)" /$2 break;
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		location ~* "^/ace-ace(/|$)(.*)" {
			
			set $namespace      "ace";
			set $ingress_name   "ace-ibm-ace-dashboard-icp4i-prod-hostname";
			set $service_name   "ace-ibm-ace-dashboard-icp4i-prod";
			set $service_port   "8300";
		set $location_path  "/ace-ace(/|${literal_dollar})(.*)";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "ace-ace-ibm-ace-dashboard-icp4i-prod-8300";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    0;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			rewrite "(?i)/ace-ace(/|$)(.*)" /$2 break;
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		location ~* "^/" {
			
			set $namespace      "";
			set $ingress_name   "";
			set $service_name   "";
			set $service_port   "0";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "upstream-default-backend";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			rewrite "(?i)/" /$2 break;
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server 9.42.75.140.nip.io
	
	## start server _
	server {
		server_name _ ;
		
		listen 80 default_server reuseport backlog=32768;
		
		listen [::]:80 default_server reuseport backlog=32768;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   default_server reuseport backlog=32768 ssl http2;
		
		listen [::]:442 proxy_protocol  default_server reuseport backlog=32768 ssl http2;
		
		# PEM sha: 131ebe97922b3761399f87b3cca27ece09147151
		ssl_certificate                         /etc/ingress-controller/ssl/default-fake-certificate.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/default-fake-certificate.pem;
		
		location ~* "^/integration(/|$)(.*)" {
			
			set $namespace      "integration";
			set $ingress_name   "icp4i-ibm-icp4i-prod";
			set $service_name   "icp4i-ibm-icp4i-prod";
			set $service_port   "5055";
		set $location_path  "/integration(/|${literal_dollar})(.*)";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "integration-icp4i-ibm-icp4i-prod-5055";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			rewrite "(?i)/integration(/|$)(.*)" /$2 break;
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		location ~* "^/ace-ace" {
			
			set $namespace      "ace";
			set $ingress_name   "ace-ibm-ace-dashboard-icp4i-prod-ip";
			set $service_name   "ace-ibm-ace-dashboard-icp4i-prod";
			set $service_port   "8300";
			set $location_path  "/ace-ace";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "ace-ace-ibm-ace-dashboard-icp4i-prod-8300";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			if ($uri ~* "^/ace-ace") {
				return 301 https://9.42.75.140.nip.io/ace-ace;
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		location ~* "^/" {
			
			set $namespace      "";
			set $ingress_name   "";
			set $service_name   "";
			set $service_port   "0";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			access_log off;
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "upstream-default-backend";
			set $proxy_host             $proxy_upstream_name;
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass http://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		# health checks in cloud providers require the use of port 80
		location /healthz {
			
			access_log off;
			return 200;
		}
		
		# this is required to avoid error if nginx is being monitored
		# with an external software (like sysdig)
		location /nginx_status {
			
			allow 127.0.0.1;
			
			allow ::1;
			
			deny all;
			
			access_log off;
			stub_status on;
		}
		
	}
	## end server _
	
	## start server gateway-director.9.42.75.140.nip.io
	server {
		server_name gateway-director.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 131ebe97922b3761399f87b3cca27ece09147151
		ssl_certificate                         /etc/ingress-controller/ssl/default-fake-certificate.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/default-fake-certificate.pem;
		
		location / {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r6098d9f17b-dynamic-gateway-service";
			set $service_name   "r6098d9f17b-dynamic-gateway-service-ingress";
			set $service_port   "3000";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r6098d9f17b-dynamic-gateway-service-ingress-3000";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass http://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server gateway-director.9.42.75.140.nip.io
	
	## start server gateway.9.42.75.140.nip.io
	server {
		server_name gateway.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 500d6403c90e191a3fb9778e47461be31adfc476
		ssl_certificate                         /etc/ingress-controller/ssl/apiconnect-api-gateway-tls-1f83192ca7f98ad614a9a442288156a7.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/apiconnect-api-gateway-tls-1f83192ca7f98ad614a9a442288156a7.pem;
		
		location / {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r6098d9f17b-dynamic-gateway-service-gw";
			set $service_name   "r6098d9f17b-dynamic-gateway-service-ingress";
			set $service_port   "9443";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r6098d9f17b-dynamic-gateway-service-ingress-9443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass http://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server gateway.9.42.75.140.nip.io
	
	## start server management.9.42.75.140.nip.io
	server {
		server_name management.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 84e42b57bfde72d62133f9b8f000bea7e0fd5a0d
		ssl_certificate                         /etc/ingress-controller/ssl/apiconnect-api-manager-tls-78aef7fb8ca746ac4d57739d202af77b.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/apiconnect-api-manager-tls-78aef7fb8ca746ac4d57739d202af77b.pem;
		
		if ($uri = /) {
			return 302 /manager;
		}
		
		location /client-downloads {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r542f646b4b-apiconnect-apim-ui";
			set $service_name   "r542f646b4b-client-dl-srv";
			set $service_port   "8443";
			set $location_path  "/client-downloads";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r542f646b4b-client-dl-srv-8443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			# Cors Preflight methods needs additional options and different Return Code
			if ($request_method = 'OPTIONS') {
				more_set_headers 'Access-Control-Allow-Origin: *';
				more_set_headers 'Access-Control-Allow-Credentials: true'; 
				more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
				more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
				more_set_headers 'Access-Control-Max-Age: 1728000';
				more_set_headers 'Content-Type: text/plain charset=UTF-8';
				more_set_headers 'Content-Length: 0';
				return 204;
			}
			
			more_set_headers 'Access-Control-Allow-Origin: *';
			more_set_headers 'Access-Control-Allow-Credentials: true'; 
			more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
			more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       16k;
			proxy_buffers                           4 16k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		if ($uri = /) {
			return 302 /manager;
		}
		
		location /consumer-api {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r542f646b4b-apiconnect-apim-ui";
			set $service_name   "r542f646b4b-juhu";
			set $service_port   "2001";
			set $location_path  "/consumer-api";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r542f646b4b-juhu-2001";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			# Cors Preflight methods needs additional options and different Return Code
			if ($request_method = 'OPTIONS') {
				more_set_headers 'Access-Control-Allow-Origin: *';
				more_set_headers 'Access-Control-Allow-Credentials: true'; 
				more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
				more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
				more_set_headers 'Access-Control-Max-Age: 1728000';
				more_set_headers 'Content-Type: text/plain charset=UTF-8';
				more_set_headers 'Content-Length: 0';
				return 204;
			}
			
			more_set_headers 'Access-Control-Allow-Origin: *';
			more_set_headers 'Access-Control-Allow-Credentials: true'; 
			more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
			more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       16k;
			proxy_buffers                           4 16k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		if ($uri = /) {
			return 302 /manager;
		}
		
		location /analytics {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r542f646b4b-apiconnect-apim-ui";
			set $service_name   "r542f646b4b-analytics-proxy";
			set $service_port   "8084";
			set $location_path  "/analytics";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r542f646b4b-analytics-proxy-8084";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			# Cors Preflight methods needs additional options and different Return Code
			if ($request_method = 'OPTIONS') {
				more_set_headers 'Access-Control-Allow-Origin: *';
				more_set_headers 'Access-Control-Allow-Credentials: true'; 
				more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
				more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
				more_set_headers 'Access-Control-Max-Age: 1728000';
				more_set_headers 'Content-Type: text/plain charset=UTF-8';
				more_set_headers 'Content-Length: 0';
				return 204;
			}
			
			more_set_headers 'Access-Control-Allow-Origin: *';
			more_set_headers 'Access-Control-Allow-Credentials: true'; 
			more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
			more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       16k;
			proxy_buffers                           4 16k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		if ($uri = /) {
			return 302 /manager;
		}
		
		location /api {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r542f646b4b-apiconnect-apim-ui";
			set $service_name   "r542f646b4b-juhu";
			set $service_port   "2000";
			set $location_path  "/api";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r542f646b4b-juhu-2000";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			# Cors Preflight methods needs additional options and different Return Code
			if ($request_method = 'OPTIONS') {
				more_set_headers 'Access-Control-Allow-Origin: *';
				more_set_headers 'Access-Control-Allow-Credentials: true'; 
				more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
				more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
				more_set_headers 'Access-Control-Max-Age: 1728000';
				more_set_headers 'Content-Type: text/plain charset=UTF-8';
				more_set_headers 'Content-Length: 0';
				return 204;
			}
			
			more_set_headers 'Access-Control-Allow-Origin: *';
			more_set_headers 'Access-Control-Allow-Credentials: true'; 
			more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
			more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       16k;
			proxy_buffers                           4 16k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		if ($uri = /) {
			return 302 /manager;
		}
		
		location / {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r542f646b4b-apiconnect-apim-ui";
			set $service_name   "r542f646b4b-ui";
			set $service_port   "8443";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r542f646b4b-ui-8443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			# Cors Preflight methods needs additional options and different Return Code
			if ($request_method = 'OPTIONS') {
				more_set_headers 'Access-Control-Allow-Origin: *';
				more_set_headers 'Access-Control-Allow-Credentials: true'; 
				more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
				more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
				more_set_headers 'Access-Control-Max-Age: 1728000';
				more_set_headers 'Content-Type: text/plain charset=UTF-8';
				more_set_headers 'Content-Length: 0';
				return 204;
			}
			
			more_set_headers 'Access-Control-Allow-Origin: *';
			more_set_headers 'Access-Control-Allow-Credentials: true'; 
			more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
			more_set_headers 'Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       16k;
			proxy_buffers                           4 16k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server management.9.42.75.140.nip.io
	
	## start server miscapps.9.42.75.140.nip.io
	server {
		server_name miscapps.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 131ebe97922b3761399f87b3cca27ece09147151
		ssl_certificate                         /etc/ingress-controller/ssl/default-fake-certificate.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/default-fake-certificate.pem;
		
		location ~* "^/miscapps" {
			
			set $namespace      "mikecai";
			set $ingress_name   "misc-apps-ibm-websphere";
			set $service_name   "misc-apps-http";
			set $service_port   "9443";
			set $location_path  "/miscapps";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "mikecai-misc-apps-http-9443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
		location ~* "^/" {
			
			set $namespace      "";
			set $ingress_name   "";
			set $service_name   "";
			set $service_port   "0";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "upstream-default-backend";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			rewrite "(?i)/" /miscapps break;
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server miscapps.9.42.75.140.nip.io
	
	## start server portal-admin.9.42.75.140.nip.io
	server {
		server_name portal-admin.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: 131ebe97922b3761399f87b3cca27ece09147151
		ssl_certificate                         /etc/ingress-controller/ssl/default-fake-certificate.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/default-fake-certificate.pem;
		
		location / {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r2484482d49-apic-portal-director";
			set $service_name   "r2484482d49-apic-portal-nginx";
			set $service_port   "4443";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r2484482d49-apic-portal-nginx-4443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass http://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server portal-admin.9.42.75.140.nip.io
	
	## start server portal.9.42.75.140.nip.io
	server {
		server_name portal.9.42.75.140.nip.io ;
		
		listen 80;
		
		listen [::]:80;
		
		set $proxy_upstream_name "-";
		
		listen 442 proxy_protocol   ssl http2;
		
		listen [::]:442 proxy_protocol  ssl http2;
		
		# PEM sha: a4ffc8e9d51e90f46e8505709f76ca151721b362
		ssl_certificate                         /etc/ingress-controller/ssl/apiconnect-www-tls-f7790ac51f4eac87e6be2b4a8a2e6047.pem;
		ssl_certificate_key                     /etc/ingress-controller/ssl/apiconnect-www-tls-f7790ac51f4eac87e6be2b4a8a2e6047.pem;
		
		location / {
			
			set $namespace      "apiconnect";
			set $ingress_name   "r2484482d49-apic-portal-web";
			set $service_name   "r2484482d49-apic-portal-web-cluster";
			set $service_port   "4443";
			set $location_path  "/";
			
			rewrite_by_lua_block {
				balancer.rewrite()
			}
			
			header_filter_by_lua_block {
				
			}
			body_filter_by_lua_block {
				
			}
			
			log_by_lua_block {
				
				balancer.log()
				
				monitor.call()
				
			}
			
			if ($scheme = https) {
				more_set_headers                        "Strict-Transport-Security: max-age=15724800; includeSubDomains";
			}
			
			port_in_redirect off;
			
			set $proxy_upstream_name    "apiconnect-r2484482d49-apic-portal-web-cluster-4443";
			set $proxy_host             $proxy_upstream_name;
			
			# enforce ssl on server side
			if ($redirect_to_https) {
				set_by_lua_block $redirect_host {
					local ngx_re = require "ngx.re"
					
					local host_port, err = ngx_re.split(ngx.var.best_http_host, ":")
					if err then
					ngx.log(ngx.ERR, "could not parse variable: ", err)
					return ngx.var.best_http_host;
					end
					
					return host_port[1];
				}
				
				return 308 https://$redirect_host$request_uri;
				
			}
			
			client_max_body_size                    1m;
			
			proxy_set_header Host                   $best_http_host;
			
			# Pass the extracted client certificate to the backend
			
			# Allow websocket connections
			proxy_set_header                        Upgrade           $http_upgrade;
			
			proxy_set_header                        Connection        $connection_upgrade;
			
			proxy_set_header X-Request-ID           $req_id;
			proxy_set_header X-Real-IP              $the_real_ip;
			
			proxy_set_header X-Forwarded-For        $the_real_ip;
			
			proxy_set_header X-Forwarded-Host       $best_http_host;
			proxy_set_header X-Forwarded-Port       $pass_port;
			proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
			
			proxy_set_header X-Original-URI         $request_uri;
			
			proxy_set_header X-Scheme               $pass_access_scheme;
			
			# Pass the original X-Forwarded-For
			proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
			
			# mitigate HTTPoxy Vulnerability
			# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
			proxy_set_header Proxy                  "";
			
			# Custom headers to proxied server
			
			proxy_connect_timeout                   5s;
			proxy_send_timeout                      60s;
			proxy_read_timeout                      60s;
			
			proxy_buffering                         off;
			proxy_buffer_size                       4k;
			proxy_buffers                           4 4k;
			proxy_request_buffering                 on;
			
			proxy_http_version                      1.1;
			
			proxy_cookie_domain                     off;
			proxy_cookie_path                       off;
			
			# In case of errors try the next upstream server before returning an error
			proxy_next_upstream                     error timeout;
			proxy_next_upstream_tries               3;
			
			proxy_pass https://upstream_balancer;
			
			proxy_redirect                          off;
			
		}
		
	}
	## end server portal.9.42.75.140.nip.io
	
	# backend for when default-backend-service is not configured or it does not have endpoints
	server {
		listen 8181 default_server reuseport backlog=32768;
		listen [::]:8181 default_server reuseport backlog=32768;
		set $proxy_upstream_name "internal";
		
		access_log off;
		
		location / {
			return 404;
		}
	}
	
	# default server, used for NGINX healthcheck and access to nginx stats
	server {
		listen unix:/tmp/nginx-status-server.sock;
		set $proxy_upstream_name "internal";
		
		keepalive_timeout 0;
		gzip off;
		
		access_log off;
		
		location /healthz {
			return 200;
		}
		
		location /is-dynamic-lb-initialized {
			content_by_lua_block {
				local configuration = require("configuration")
				local backend_data = configuration.get_backends_data()
				if not backend_data then
				ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
				return
				end
				
				ngx.say("OK")
				ngx.exit(ngx.HTTP_OK)
			}
		}
		
		location /nginx_status {
			stub_status on;
		}
		
		location /configuration {
			# this should be equals to configuration_data dict
			client_max_body_size                    10m;
			client_body_buffer_size                 10m;
			proxy_buffering                         off;
			
			content_by_lua_block {
				configuration.call()
			}
		}
		
		location / {
			content_by_lua_block {
				ngx.exit(ngx.HTTP_NOT_FOUND)
			}
		}
	}
}

stream {
	lua_package_cpath "/usr/local/lib/lua/?.so;/usr/lib/lua-platform-path/lua/5.1/?.so;;";
	lua_package_path "/etc/nginx/lua/?.lua;/etc/nginx/lua/vendor/?.lua;/usr/local/lib/lua/?.lua;;";
	
	lua_shared_dict tcp_udp_configuration_data 5M;
	
	init_by_lua_block {
		require("resty.core")
		collectgarbage("collect")
		
		-- init modules
		local ok, res
		
		ok, res = pcall(require, "configuration")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		configuration = res
	configuration.nameservers = { "10.0.0.10" }
		end
		
		ok, res = pcall(require, "tcp_udp_configuration")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		tcp_udp_configuration = res
		end
		
		ok, res = pcall(require, "tcp_udp_balancer")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		tcp_udp_balancer = res
		end
	}
	
	init_worker_by_lua_block {
		tcp_udp_balancer.init_worker()
	}
	
	lua_add_variable $proxy_upstream_name;
	
	log_format log_stream [$time_local] $protocol $status $bytes_sent $bytes_received $session_time;
	
	access_log off;
	
	error_log  /var/log/nginx/error.log;
	
	upstream upstream_balancer {
		server 0.0.0.1:1234; # placeholder
		
		balancer_by_lua_block {
			tcp_udp_balancer.balance()
		}
	}
	
	server {
		listen unix:/tmp/ingress-stream.sock;
		
		content_by_lua_block {
			tcp_udp_configuration.call()
		}
	}
	
	# TCP services
	
	# UDP services
	
}

